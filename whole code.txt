backend/models
=>Cart.js
// Using destructuring to import Schema and model from mongoose
const { Schema, model } = require('mongoose');

// Defining the cart item schema
const cartItemSchema = new Schema({
  productId: {
    type: String,
    required: true,
  },
  name: {
    type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  quantity: {
    type: Number,
    required: true,
  },
});

// Defining the cart schema
const cartSchema = new Schema({
  userId: {
    type: String,
    required: true,
  }, // associate cart with a user
  items: [cartItemSchema],
}, { timestamps: true });

// Exporting the Cart model
module.exports = model('Cart', cartSchema);
=>Contact.js
const mongoose = require('mongoose');

const ContactSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
  },
  message: {
    type: String,
    required: true,
  },
  date: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model('Contact', ContactSchema);

=>Order.js
// Using destructuring to import Schema and model from mongoose
const { Schema, model } = require('mongoose');

// Defining the order item schema
const orderItemSchema = new Schema({
  productId: {
    type: String,
    required: true,
  },
  name: {
    type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  quantity: {
    type: Number,
    required: true,
  },
});

// Defining the shipping details schema
const shippingDetailsSchema = new Schema({
  address: {
    type: String,
    required: true,
  },
  city: {
    type: String,
    required: true,
  },
  state: {
    type: String,
    required: true,
  },
  zip: {
    type: String,
    required: true,
  },
  contactNumber: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
  },
});

// Defining the order schema
const orderSchema = new Schema({
  userId: {
    type: String,
    required: true,
  },
  items: {
    type: [orderItemSchema],
    required: true,
  },
  totalPrice: {
    type: Number,
    required: true,
  },
  shippingDetails: { // Add shipping details
    type: shippingDetailsSchema,
    required: true,
  },
}, { timestamps: true });

// Exporting the Order model
module.exports = model('Order', orderSchema);
=>Product.js
// Using destructuring to import Schema and model from mongoose
const { Schema, model } = require('mongoose');

// Defining the product schema
const productSchema = new Schema({
  name: String,
  price: Number,
  category: String,
  image: String,
  stock: {
    type: Number,
    default: 0,
  },
}, { timestamps: true });

// Exporting the Product model
module.exports = model('Product', productSchema);
=>User.js
// Using destructuring to import Schema from mongoose
const { Schema, model } = require('mongoose');

// Defining the user schema
const userSchema = new Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  role: {
    type: String,
    enum: ['user', 'seller'],
    default: 'user',
  },
}, { timestamps: true });

// Exporting the User model
module.exports = model('User', userSchema);
backend/routes
=>auth.js
const express = require('express');
const router = express.Router();
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// It is recommended to use a long, complex, and environment-specific secret.
const JWT_SECRET = process.env.JWT_SECRET || 'a_very_long_and_secure_secret_key_that_is_at_least_32_characters_long';

// Route for user signup
router.post('/signup', async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    // Basic validation
    if (!name || !email || !password) {
      return res.status(400).json({ error: 'All fields are required' });
    }

    // Check if the user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: 'Email is already registered' });
    }

    // Hash the password before saving it to the database
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Create a new user
    const newUser = new User({ name, email, password: hashedPassword, role });
    await newUser.save();

    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Route for user signin
router.post('/signin', async (req, res) => {
  try {
    const { email, password } = req.body;

    // Find the user by email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ error: 'Invalid credentials' });
    }

    // Compare the provided password with the stored hashed password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: 'Invalid credentials' });
    }

    // Generate a JWT token
    const token = jwt.sign(
      { id: user._id, name: user.name, email: user.email, role: user.role },
      JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({ token, user: { id: user._id, name: user.name, email: user.email, role: user.role } });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
=>cart.js
const express = require('express');
const router = express.Router();
const Cart = require('../models/Cart');

// Route to add or update a user's cart
router.post('/add', async (req, res) => {
  const { userId, items } = req.body;

  try {
    let cart = await Cart.findOne({ userId });

    if (cart) {
      // If cart exists, update the items
      cart.items = items;
    } else {
      // If cart does not exist, create a new one
      cart = new Cart({ userId, items });
    }

    await cart.save();
    res.status(200).json({ message: 'Cart updated successfully', cart });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to update cart' });
  }
});

// Route to get a user's cart
router.get('/:userId', async (req, res) => {
  try {
    const cart = await Cart.findOne({ userId: req.params.userId });

    if (!cart) {
      // If no cart is found, return an empty cart
      return res.status(200).json({ items: [] });
    }

    res.status(200).json(cart);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to fetch cart' });
  }
});

module.exports = router;
=>contact.js
const express = require('express');
const router = express.Router();
const Contact = require('../models/Contact');

// @route   POST api/contact
// @desc    Submit contact form
// @access  Public
router.post('/', async (req, res) => {
  const { name, email, message } = req.body;

  // Simple validation
  if (!name || !email || !message) {
    return res.status(400).json({ msg: 'Please enter all fields' });
  }

  try {
    const newContact = new Contact({
      name,
      email,
      message,
    });

    const contact = await newContact.save();
    res.json({ msg: 'Contact form submitted successfully', contact });
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server Error');
  }
});

module.exports = router;

=>order.js
const express = require('express');
const router = express.Router();
const Order = require('../models/Order');

// Route to place a new order
router.post('/place', async (req, res) => {
  try {
    const { userId, items, totalPrice, shippingDetails } = req.body;

    console.log("Received order data:", req.body);

    // Basic validation
    if (!userId || !items || items.length === 0 || !totalPrice || !shippingDetails) {
      return res.status(400).json({ message: 'Invalid order data' });
    }

    // Validate and map items to ensure they have the required properties
    const validatedItems = items.map(item => {
      if (!item.id && !item.productId) {
        throw new Error('Each item must have a productId');
      }
      return {
        productId: item.id || item.productId,
        name: item.name,
        price: item.price,
        quantity: item.quantity || 1,
      };
    });

    // Create a new order
    const newOrder = new Order({
      userId,
      items: validatedItems,
      totalPrice,
      shippingDetails,
    });

    console.log("Saving Order:", newOrder); // For debugging purposes
    await newOrder.save();

    res.status(201).json({ message: 'Order placed successfully!' });
  } catch (error) {
    console.error("Order Error:", error);
    res.status(500).json({ message: 'Failed to place order', error: error.message });
  }
});

module.exports = router;
=>products.js
const express = require('express');
const router = express.Router();
const Product = require('../models/Product');

// Route to get all products
router.get('/', async (req, res) => {
  try {
    const products = await Product.find();
    res.status(200).json(products);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

// Route to create a new product
router.post('/', async (req, res) => {
  try {
    const { name, price, category, image, stock } = req.body;
    const newProduct = new Product({ name, price, category, image, stock });
    await newProduct.save();
    res.status(201).json(newProduct);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to create product' });
  }
});

// Route to update a product
router.put('/:id', async (req, res) => {
  try {
    const { name, price, category, image, stock } = req.body;
    const updatedProduct = await Product.findByIdAndUpdate(
      req.params.id,
      { name, price, category, image, stock },
      { new: true } // Return the updated document
    );
    if (!updatedProduct) {
      return res.status(404).json({ error: 'Product not found' });
    }
    res.status(200).json(updatedProduct);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to update product' });
  }
});

// Route to delete a product
router.delete('/:id', async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);
    if (!deletedProduct) {
      return res.status(404).json({ error: 'Product not found' });
    }
    res.status(200).json({ message: 'Product deleted successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to delete product' });
  }
});

// Route to seed the database with sample products (for development purposes)
router.post('/seed', async (req, res) => {
  try {
    const sampleProducts = [
      { name: 'OnePlus TV', price: 20000, category: 'home', image: 'images/1+tv.jpeg', stock: 10 },
      { name: 'Preethi Mixture', price: 2500, category: 'home', image: 'images/preethi.jpeg', stock: 15 },
      { name: 'MI Washing Machine', price: 15000, category: 'home', image: 'images/miw.jpeg', stock: 5 },
      { name: 'Realme AC', price: 35000, category: 'home', image: 'images/relme.jpeg', stock: 3 },
      { name: 'Sony Speaker', price: 4000, category: 'home', image: 'images/sony.jpeg', stock: 8 },
      { name: 'Pickachu Mobile', price: 10, category: 'mobiles', image: 'images/pickachu.jpg', stock: 25 },
      { name: 'OnePlus', price: 25000, category: 'mobiles', image: 'images/1+.jpeg', stock: 7 },
      { name: 'Apple', price: 70000,category: 'mobiles', image: 'images/apple.jpeg', stock: 4 },
    ];

    // Clear existing products and insert the sample products
    await Product.deleteMany({});
    const insertedProducts = await Product.insertMany(sampleProducts);

    res.status(201).json(insertedProducts);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to seed products' });
  }
});

module.exports = router;
.env
PORT=5000
MONGO_URI=mongodb://127.0.0.1:27017/mystore
JWT_SECRET=your_jwt_secret_here

src/components
=>CheckoutForm.css
=>CheckoutForm.js
import React, { useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import "./CheckoutForm.css"; 

const CheckoutForm = ({ cart }) => {
  const navigate = useNavigate();
  const location = useLocation();
  const token = localStorage.getItem("token");
  const user = JSON.parse(localStorage.getItem("user"));
  const userId = user?.id;

  // ✅ If coming from Buy Now, items will be passed via state
  const buyNowItems = location.state?.items || [];
  const items = buyNowItems.length > 0 ? buyNowItems : cart;

  // Shipping details state
  const [email, setEmail] = useState("");
  const [contactNumber, setContactNumber] = useState("");
  const [address, setAddress] = useState("");
  const [city, setCity] = useState("");
  const [zip, setZip] = useState("");
  const [stateName, setStateName] = useState("");
  const [postalCode, setPostalCode] = useState("");
  const [country, setCountry] = useState("");

  const placeOrder = async () => {
    if (!userId) {
      alert("Please login first");
      return;
    }

    const response = await fetch("http://localhost:5000/api/order/place", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({
        userId,
        items: items.map((p) => ({
          productId: p.id || p._id,
          name: p.name,
          price: p.price,
          quantity: 1,
        })),
        totalPrice: items.reduce((sum, p) => sum + p.price, 0),
        shippingDetails: {
          email,
          contactNumber,
          address,
          city,
          zip,
          state: stateName,
          postalCode,
          country,
        },
      }),
    });

    const data = await response.json();
    if (response.ok) {
      alert("Order placed successfully!");
      navigate("/");
    } else {
      alert(data.error || "Failed to place order");
    }
  };

  return (
    <div className="checkout-container">
      <h2>Checkout</h2>

      <div className="checkout-form">
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />

        <input
          type="text"
          placeholder="Contact Number"
          value={contactNumber}
          onChange={(e) => setContactNumber(e.target.value)}
        />

        <input
          type="text"
          placeholder="Address"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
        />

        <input
          type="text"
          placeholder="City"
          value={city}
          onChange={(e) => setCity(e.target.value)}
        />

        <input
          type="text"
          placeholder="Zip Code"
          value={zip}
          onChange={(e) => setZip(e.target.value)}
        />

        <input
          type="text"
          placeholder="State"
          value={stateName}
          onChange={(e) => setStateName(e.target.value)}
        />

        <input
          type="text"
          placeholder="Postal Code"
          value={postalCode}
          onChange={(e) => setPostalCode(e.target.value)}
        />

        <input
          type="text"
          placeholder="Country"
          value={country}
          onChange={(e) => setCountry(e.target.value)}
        />

        <button className="place-order-btn" onClick={placeOrder}>
          Place Order
        </button>
      </div>

      <div className="order-summary">
        <h3>Order Summary</h3>
        {items.map((item, index) => (
          <p key={index}>
            {item.name} - ₹{item.price}
          </p>
        ))}
        <p>
          <strong>Total:</strong> ₹
          {items.reduce((sum, p) => sum + p.price, 0)}
        </p>
      </div>
    </div>
  );
};

export default CheckoutForm;

src/pages
=>SellerPage.css
=>SellerPage.js
import React, { useState, useEffect } from 'react';
import './SellerPage.css';

const SellerPage = () => {
  const [products, setProducts] = useState([]);
  const [form, setForm] = useState({ name: '', price: '', category: '', image: '', stock: '' });
  const [isEditing, setIsEditing] = useState(false);
  const [currentProductId, setCurrentProductId] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    setLoading(true);
    try {
      const res = await fetch('http://localhost:5000/api/products');
      const data = await res.json();
      setProducts(data);
    } catch (error) {
      console.error('Failed to fetch products:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const url = isEditing ? `http://localhost:5000/api/products/${currentProductId}` : 'http://localhost:5000/api/products';
    const method = isEditing ? 'PUT' : 'POST';

    try {
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });

      if (res.ok) {
        fetchProducts();
        setForm({ name: '', price: '', category: '', image: '', stock: '' });
        setIsEditing(false);
        setCurrentProductId(null);
      }
    } catch (error) {
      console.error('Failed to save product:', error);
    }
  };

  const handleEdit = (product) => {
    setForm(product);
    setIsEditing(true);
    setCurrentProductId(product._id);
  };

  const handleDelete = async (productId) => {
    try {
      const res = await fetch(`http://localhost:5000/api/products/${productId}`, {
        method: 'DELETE',
      });

      if (res.ok) {
        fetchProducts();
      }
    } catch (error) {
      console.error('Failed to delete product:', error);
    }
  };

  return (
    <div>
      <h1>Seller Dashboard</h1>

      <h2>{isEditing ? 'Edit Product' : 'Add Product'}</h2>
      <form onSubmit={handleSubmit}>
        <input type="text" name="name" placeholder="Name" value={form.name} onChange={handleChange} required />
        <input type="number" name="price" placeholder="Price" value={form.price} onChange={handleChange} required />
        <input type="text" name="category" placeholder="Category" value={form.category} onChange={handleChange} required />
        <input type="text" name="image" placeholder="Image URL" value={form.image} onChange={handleChange} required />
        <input type="number" name="stock" placeholder="Stock" value={form.stock} onChange={handleChange} required />
        <button type="submit">{isEditing ? 'Update Product' : 'Add Product'}</button>
        {isEditing && <button onClick={() => { setIsEditing(false); setForm({ name: '', price: '', category: '', image: '', stock: '' }); }}>Cancel</button>}
      </form>

      <h2>Your Products</h2>
      {loading ? (
        <p>Loading products...</p>
      ) : products.length === 0 ? (
        <p>No products found. Add a new product to get started.</p>
      ) : (
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Price</th>
              <th>Category</th>
              <th>Stock</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {products.map((product) => (
              <tr key={product._id}>
                <td>{product.name}</td>
                <td>{product.price}</td>
                <td>{product.category}</td>
                <td>{product.stock}</td>
                <td>
                  <button onClick={() => handleEdit(product)}>Edit</button>
                  <button onClick={() => handleDelete(product._id)}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default SellerPage;
=>Signin.css
=>Signin.js
import React, { useState } from 'react';
import './Signin.css';
import { useNavigate, Link } from 'react-router-dom';

export default function SignIn({ setUser }) {
  const [form, setForm] = useState({ email: '', password: '', role: 'user' });
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch('http://localhost:5000/api/auth/signin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form)
      });

      const data = await res.json();
      if (res.ok) {
        // Store JWT & user info in localStorage
        localStorage.setItem('token', data.token);
        localStorage.setItem('user', JSON.stringify(data.user));

        // Update the user state in the App component
        setUser(data.user);

        if (data.user.role === 'seller') {
          navigate('/seller');
        } else {
          navigate('/');
        }
        setError('');
      } else {
        setError(data.error || 'Login failed');
      }
    } catch (err) {
      console.error(err);
      setError('Server error');
    }
  };

  return (
    <div className="auth-page">
      <div className="auth-container">
        <h2>Sign In</h2>
        {error && <p className="error">{error}</p>}
        <form onSubmit={handleSubmit}>
          <input
            type="email"
            name="email"
            placeholder="Email"
            value={form.email}
            onChange={handleChange}
            required
          />
          <input
            type="password"
            name="password"
            placeholder="Password"
            value={form.password}
            onChange={handleChange}
            required
          />
          <select name="role" value={form.role} onChange={handleChange}>
            <option value="user">User</option>
            <option value="seller">Seller</option>

          </select>
          <button type="submit">Sign In</button>
        </form>
        <p className="auth-switch-link">
          Don't have an account? <Link to="/signup">Sign Up</Link>
        </p>
      </div>
    </div>
  );
}

=>Signup.css
=>Signup.js
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import './Signup.css';

function Signup() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  const handleSignup = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch('http://localhost:5000/api/auth/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, email, password })
      });
      const data = await res.json();

      if (!res.ok) throw new Error(data.error || 'Signup failed');

      setMessage('✅ Signup successful. You can now sign in.');
      // Redirect to the sign-in page after a short delay
      setTimeout(() => {
        navigate('/signin');
      }, 2000);
    } catch (err) {
      setMessage(err.message);
    }
  };

  return (
    <div className="auth-page">
      <div className="auth-container">
        <h2>Sign Up</h2>
        <form onSubmit={handleSignup}>
          <input type="text" placeholder="Name" value={name} onChange={e => setName(e.target.value)} required />
          <input type="email" placeholder="Email" value={email} onChange={e => setEmail(e.target.value)} required />
          <input type="password" placeholder="Password" value={password} onChange={e => setPassword(e.target.value)} required />
          <button type="submit">Sign Up</button>
        </form>
        {message && <p className={message.startsWith('✅') ? 'success' : 'error'}>{message}</p>}
        <p className="auth-switch-link">
          Already have an account? <Link to="/signin">Sign In</Link>
        </p>
      </div>
    </div>
  );
}

export default Signup;
=>server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
require('dotenv').config();

const app = express(); // app must be initialized first

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Routes
const authRoutes = require('./routes/auth');
const cartRoutes = require('./routes/cart'); 
const orderRoutes = require('./routes/order'); // Import order routes
const contactRoutes = require('./routes/contact'); // Import contact routes

// Use routes
app.use('/api/auth', authRoutes);
app.use('/api/cart', cartRoutes);
app.use('/api/order', orderRoutes); // Only once
app.use('/api/contact', contactRoutes); // Add contact routes

// MongoDB connection
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("✅ MongoDB Connected"))
  .catch(err => console.error("❌ MongoDB Error:", err));

// Test route
app.get("/", (req, res) => {
  res.send("Backend is working ✅");
});

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});

src
=>about.js
import React from "react";
import './App.css';

function About() {
    return (
        <div className="about-container">
        <section id="about" className="about">
            <h2>About Us</h2>
            <p>Welcome to My Store! We are dedicated to providing the best mobile phones at unbeatable prices. Our team is passionate about technology and customer satisfaction.</p>
            <p>Contact us for any inquiries or support.</p>
        </section>
        </div>
    );
}
export default About;
=>App.css

    * {
        box-sizing: border-box;
    }
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        background: #f8f9fa;
        color: #333;
        line-height: 1.5;
    }
    a {
        color: #0d6efd;
        text-decoration: none;
    }
    a:hover, a:focus {
        text-decoration: underline;
        outline: none;
    }

  
    header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: #343a40;
        padding: 14px 20px;
        position: sticky;
        top: 0;
        z-index: 1000;
        flex-wrap: wrap;
        gap: 10px;
    }
    .logo-container {
        display: flex;
        align-items: center;
        flex: 0 0 auto;
    }
    .logo {
        height: 48px;
        width: auto;
        border-radius: 6px;
        object-fit: contain;
        background: white;
        border: 1px solid #eee;
        padding: 4px;
    }
    .navbar {
        display: flex;
        flex-wrap: wrap;
        gap: 1.2rem;
        justify-content: center;
        flex: 1 1 auto;
        min-width: 220px;
    }
    .navbar a {
        color: #fff;
        font-weight: 600;
        padding: 8px 15px;
        border-radius: 4px;
        font-size: 1rem;
        transition: background-color 0.3s ease;
    }
    .navbar a:hover, .navbar a:focus {
        background-color: #0d6efd;
        outline: none;
        text-decoration: none;
    }
    .auth-links {
        flex: 0 0 auto;
        display: flex;
        align-items: center;
        gap: 0.6rem;
    }
    .auth-link {
        color: #ffc107;
        font-weight: 600;
        padding: 6px 12px;
        border-radius: 5px;
        transition: background 0.2s ease;
    }
    .auth-link:hover, .auth-link:focus {
        background: #ffc107;
        color: #343a40;
        text-decoration: none;
        outline: none;
    }

    /* Search Bar */
    .search-container {
        position: relative;
        flex: 1 1 300px;
        max-width: 450px;
        margin: 8px 15px 8px 15px;
        align-self: center;
    }
    .search-container input[type="search"] {
        width: 100%;
        padding: 9px 12px;
        border-radius: 6px;
        border: none;
        font-size: 1rem;
        outline: none;
        box-shadow: 0 0 4px rgba(0,0,0,0.15);
        transition: box-shadow 0.3s ease;
    }
    .search-container input[type="search"]:focus {
        box-shadow: 0 0 8px #0d6efd;
    }
    .autocomplete-list {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ccc;
        border-top: none;
        max-height: 170px;
        overflow-y: auto;
        z-index: 1100;
        border-radius: 0 0 6px 6px;
    }
    .autocomplete-list div {
        padding: 8px 12px;
        cursor: pointer;
        font-size: 0.95rem;
        color: #222;
    }
    .autocomplete-list div:hover,
    .autocomplete-list div[aria-selected="true"] {
        background-color: #0d6efd;
        color: white;
    }

    h1 {
        text-align: center;
        margin: 30px 0 10px;
        color: #222;
        letter-spacing: 0.06em;
    }


    /* Offers Section */
    #offers {
        background: #fff3cd;
        border: 1px solid #ffeeba;
        margin: 20px auto;
        max-width: 1200px;
        padding: 20px;
        border-radius: 6px;
        box-shadow: 0 2px 6px rgb(0 0 0 / 0.08);
    }
    #offers h2 {
        font-size: 1.8rem;
        margin-bottom: 15px;
        text-align: center;
        color: #856404;
        font-weight: 700;
    }
    .slider-container {
        position: relative;
        background: #fff8dc;
        height: 40px;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 25px;
    }
   .offer-text {
        white-space: nowrap;
        display: inline-block;
        position: absolute;
        will-change: transform;
        animation: slide-left 10s linear infinite;
        font-weight: 600;
        color: #856404;
        padding-left: 100%;
        font-size: 1.1rem;
        top: 10px;
    }
    @keyframes slide-left {
        0% { transform: translateX(0); }
        100% { transform: translateX(-100%); }
    }
    .class-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit,minmax(180px,1fr));
        gap: 18px;
    }
    .class-item {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        text-align: center;
        padding: 12px 10px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
        display: grid;
    }
    .class-item:hover, .class-item:focus {
        transform: translateY(-4px);
        box-shadow: 0 7px 18px rgba(0,0,0,0.15);
        outline: none;
    }
    .class-item img {
        width: 100%;
        max-height: 140px;
        object-fit: contain;
        border-radius: 6px;
        margin-bottom: 12px;
      
    }
    .class-item h3 {
        font-size: 1.15rem;
        font-weight: 700;
        color: #444;
        margin-bottom: 8px;
    }
    .class-item p {
        font-size: 1rem;
        color: #666;
        margin: 0;
    }
    .class-item p del {
        color: #cc0000;
        font-weight: 600;
        margin-right: 8px;
    }
    .class-item p strong {
        color: #28a745;
        font-weight: 700;
    }

    
    .products {
        max-width: 1200px;
        margin: 30px auto 50px;
        padding: 0 15px;
    }
    .products h2 {
        text-align: center;
        font-weight: 700;
        font-size: 2rem;
        margin-bottom: 28px;
        letter-spacing: 0.04em;
        color: #222;
    }
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit,minmax(220px,1fr));
        gap: 25px;
        padding: 10px;
    }
    .product {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.09);
        padding: 18px 16px;
        display:flex;
        flex-direction: column;
        justify-content: space-between;
        transition: box-shadow 0.3s ease;
        cursor: default;
    }
    .product:hover, .product:focus-within {
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        outline: none;
    }
    .product h3 {
        font-weight: 700;
        font-size: 1.24rem;
        margin-bottom: 12px;
        min-height: 48px;
        color: #222;
    }
    .product img {
        height: 150px;
        object-fit: contain;
        margin-bottom: 15px;
        border-radius: 5px;
        
    }
    .product p {
        font-weight: 700;
        font-size: 1.1rem;
        color: #0b8457;
        margin: 0 0 15px;
      
    }
    .button-group {
        display: flex;
        gap: 12px;
    }
    button {
        flex: 1;
        padding: 11px 0;
        font-weight: 700;
        font-size: 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        
        transition: background-color 0.3s ease;
    }
    button.buy-now {
        background-color: #198754;
        color: white;
    }
    button.buy-now:hover, button.buy-now:focus {
        background-color: #145c32;
        outline: none;
    }
    button:not(.buy-now) {
        background-color: #0d6efd;
        color: white;
    }
    button:not(.buy-now):hover, button:not(.buy-now):focus {
        background-color: #0b5ed7;
        outline: none;
    }

    
    #about {
        max-width: 900px;
        margin: 48px auto 60px;
        background: white;
        padding: 28px 22px;
        border-radius: 8px;
        box-shadow: 0 3px 15px rgba(0,0,0,0.12);
        text-align: center;
    }
    #about h2 {
        font-weight: 700;
        font-size: 2rem;
        margin-bottom: 18px;
        color: #222;
    }
    #about p {
        font-size: 1.1rem;
        color: #4a4a4a;
        max-width: 720px;
        margin: 0 auto;
        line-height: 1.6;
    }

   
    #cart {
        max-width: 720px;
        background: white;
        margin: 40px auto 100px;
        border-radius: 10px;
        box-shadow: 0 4px 18px rgba(0,0,0,0.15);
        padding: 26px 24px;
    }
    #cart h2 {
        font-weight: 700;
        margin-bottom: 24px;
        color: #222;
        text-align: center;
        font-size: 1.8rem;
    }
    #cart-items {
        list-style-type: none;
        padding: 0;
        margin: 0 0 20px;
        max-height: 280px;
        overflow-y: auto;
    }
    #cart-items li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 14px 8px;
        border-bottom: 1px solid #eee;
        font-size: 1rem;
    }
    #cart-items li:last-child {
        border-bottom: none;
    }
    .cart-controls button {
        background-color: transparent;
        border: none;
        font-weight: 700;
        font-size: 1.2rem;
        cursor: pointer;
        margin: 0 6px;
        color: #0d6efd;
        padding: 3px 9px;
        border-radius: 5px;
        transition: background-color 0.25s ease;
        
    }
    .cart-controls button:hover, .cart-controls button:focus {
        background-color: #0d6efd22;
        outline: none;
    }
    .cart-controls .remove {
        color: #dc3545;
        font-size: 1.5rem;
    }
    .cart-controls .remove:hover, .cart-controls .remove:focus {
        color: #a71d2a;
        background-color: #dc35451a;
        outline: none;
    }
    .total {
        font-weight: 700;
        font-size: 1.3rem;
        text-align: right;
        color: #198754;
        margin-bottom: 0;
    }

    
    footer {
        text-align: center;
        padding: 22px 10px;
        font-size: 0.95rem;
        background-color: #343a40;
        color: white;
      
    }

  
/*    @media (max-width: 900px) {
        .product-grid {
            grid-template-columns: repeat(auto-fit,minmax(180px,1fr));
        }
    }
    @media (max-width: 768px) {
        header {
            justify-content: center;
            gap: 15px;
            padding: 12px 12px;
        }
        .logo-container {
            order: -1;
            justify-content: center;
            flex-basis: 100%;
            margin-bottom: 5px;
        }
        .navbar {
            justify-content: center;
            gap: 1rem;
            flex-basis: 100%;
        }
        .auth-links {
            justify-content: center;
            flex-basis: 100%;
        }
        .search-container {
            max-width: 100%;
            order: 0;
            flex-basis: 100%;
            margin: 8px 0;
        }
    }*/
=>App.js
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import Header from './Header';
import Main from './Main';
import './App.css';

function App() {
  const [cartItems, setCartItems] = useState([]);
  const [user, setUser] = useState(null);

  // Load user from localStorage on page reload
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  // Add product to cart
  const AddToCart = (product) => {
    setCartItems((prev) => {
      const exists = prev.find((item) => item.id === product.id);
      if (exists) {
        return prev.map((item) =>
          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        return [...prev, { ...product, quantity: 1 }];
      }
    });
  };

  // Update quantity
  const UpdateQuantity = (productId, action) => {
    setCartItems((prev) =>
      prev
        .map((item) => {
          if (item.id === productId) {
            if (action === 'increase') {
              return { ...item, quantity: item.quantity + 1 };
            }
            if (action === 'decrease') {
              return { ...item, quantity: item.quantity - 1 };
            }
          }
          return item;
        })
        .filter((item) => item.quantity > 0)
    );
  };

  const cartCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);

  const handleLogout = () => {
    setUser(null);
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  };

  return (
    <div className="App">
      <Router>
        <Header cartCount={cartCount} user={user} handleLogout={handleLogout} />
        <Main
          AddToCart={AddToCart}
          cartItems={cartItems}
          UpdateQuantity={UpdateQuantity}
          setUser={setUser}
        />
      </Router>

      <footer>
        <p>&copy; 2025 Online Store</p>
      </footer>
    </div>
  );
}

export default App;
=>cart.css
/* ------------------- Cart Container ------------------- */
.cart-container {
    max-width: 800px;
    margin: 40px auto 80px;
    background: #ffffff;
    border-radius: 12px;
    box-shadow: 0 6px 20px rgba(0,0,0,0.12);
    padding: 28px 24px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Cart Title */
#cart_items h2 {
    text-align: center;
    font-size: 2rem;
    font-weight: 700;
    color: #222;
    margin-bottom: 30px;
}

/* Empty Cart Message */
.empty-cart-message {
    text-align: center;
    font-size: 1.1rem;
    color: #6c757d;
    padding: 20px 0;
}

/* Cart List */
.cart-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 18px;
    max-height: 350px;
    overflow-y: auto;
}

/* Cart Item */
.cart-item {
    display: flex;
    align-items: center;
    padding: 12px 14px;
    border: 1px solid #eee;
    border-radius: 10px;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.cart-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.08);
}

.cart-item-image {
    width: 80px;
    height: 80px;
    object-fit: contain;
    border-radius: 8px;
    margin-right: 16px;
    background: #f8f9fa;
    padding: 6px;
}

/* Item Details */
.cart-item-details {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.cart-item-details strong {
    font-size: 1.1rem;
    color: #333;
}

.cart-item-details p {
    font-size: 1rem;
    color: #0b8457;
    font-weight: 600;
}

/* ------------------- Quantity Controls ------------------- */
.quantity-controls {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-top: 6px;
}

.quantity-controls button {
    width: 36px;
    height: 36px;
    font-size: 1.2rem;
    font-weight: 700;
    border: 1px solid #0d6efd;
    background: #ffffff;
    color: #0d6efd;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.quantity-controls button:hover {
    background: #0d6efd;
    color: #fff;
}

.quantity-controls span {
    min-width: 28px;
    text-align: center;
    font-size: 1rem;
    font-weight: 600;
}

/* ------------------- Cart Summary ------------------- */
.cart-summary {
    margin-top: 28px;
    padding: 18px 14px;
    border-top: 1px solid #eee;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.cart-summary h3 {
    font-size: 1.4rem;
    font-weight: 700;
    color: #222;
}

.cart-summary p {
    font-size: 1.1rem;
    font-weight: 600;
    color: #198754;
}

/* ------------------- Scrollbar Styling ------------------- */
.cart-list::-webkit-scrollbar {
    width: 8px;
}

.cart-list::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

.cart-list::-webkit-scrollbar-thumb {
    background: #0d6efd;
    border-radius: 4px;
}

.cart-list::-webkit-scrollbar-thumb:hover {
    background: #0b5ed7;
}

/* ------------------- Responsive ------------------- */
@media (max-width: 600px) {
    .cart-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
    }

    .cart-item-image {
        width: 100%;
        height: auto;
        margin-right: 0;
    }

    .quantity-controls {
        gap: 6px;
    }

    .cart-summary {
        text-align: center;
    }
}
=>cart.js
import React, { useState } from 'react';
import CartItem from './CartItem';
import CartSummary from './CartSummary';
import CheckoutForm from './components/CheckoutForm';
import './cart.css';

const Cart = ({ cartItems, UpdateQuantity, clearCart }) => {
  const [showCheckout, setShowCheckout] = useState(false);
  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  const totalPrice = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

  const handleBuyNow = async (product = null) => {
    if (!product) { // If "Buy All" is clicked
      setShowCheckout(true);
      return; // Stop here, let CheckoutForm handle the actual order placement
    }
    const token = localStorage.getItem('token');
    const user = JSON.parse(localStorage.getItem('user'));
    const userId = user?.id;

    if (!userId) { // Add this check
      alert('Please log in to buy now.');
      return;
    }

    let itemsToOrder = [];

    if (product) {
      // Single product buy now
      itemsToOrder = [{
        id: product.id,
        name: product.name,
        price: product.price,
        quantity: 1,
      }];
    } else {
      // All cart items
      itemsToOrder = cartItems.map((item) => ({
        id: item.id,
        name: item.name,
        price: item.price,
        quantity: item.quantity,
      }));
    }

    const totalOrderPrice = itemsToOrder.reduce((sum, item) => sum + item.price * item.quantity, 0);

    try {
      const res = await fetch('http://localhost:5000/api/order/place', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ userId, items: itemsToOrder, totalPrice: totalOrderPrice }),
      });

      const data = await res.json();
      alert(data.message);

      // Clear cart if ordering all items
      if (!product) clearCart();

    } catch (err) {
      console.error(err);
      alert('Failed to place order');
    }
  };

  const handlePlaceOrder = async (shippingDetails) => {
    const token = localStorage.getItem('token');
    const user = JSON.parse(localStorage.getItem('user'));
    const userId = user?.id;

    if (!userId) {
      alert('Please log in to place an order.');
      return;
    }

    const itemsToOrder = cartItems.map((item) => ({
      id: item.id,
      name: item.name,
      price: item.price,
      quantity: item.quantity,
    }));

    const totalOrderPrice = itemsToOrder.reduce((sum, item) => sum + item.price * item.quantity, 0);

    try {
      console.log("Sending order data:", { userId, items: itemsToOrder, totalPrice: totalOrderPrice, shippingDetails });
      const res = await fetch('http://localhost:5000/api/order/place', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          userId,
          items: itemsToOrder,
          totalPrice: totalOrderPrice,
          shippingDetails,
        }),
      });

      const data = await res.json();
      alert(data.message);

      if (res.ok) {
        clearCart();
        setShowCheckout(false);
      }

    } catch (err) {
      console.error(err);
      alert('Failed to place order');
    }
  };

  return (
    <div className="cart-container">
      <h2>Your Cart</h2>
      {cartItems.length === 0 ? (
        <p>Cart is empty</p>
      ) : (
        <>
          {showCheckout ? (
            <CheckoutForm
              onPlaceOrder={handlePlaceOrder}
              cartItems={cartItems}
              totalPrice={totalPrice}
            />
          ) : (
            <>
              <ul className="cart-list">
                {cartItems.map((item) => (
                  <CartItem
                    key={item.id}
                    item={item}
                    UpdateQuantity={UpdateQuantity}
                    handleBuyNow={handleBuyNow}
                  />
                ))}
              </ul>
              <CartSummary
                totalItems={totalItems}
                totalPrice={totalPrice}
                handleBuyNow={handleBuyNow}
              />
            </>
          )}
        </>
      )}
    </div>
  );
};

export default Cart;
=>CartItem.js
import React from 'react';

const CartItem = ({ item, UpdateQuantity, handleBuyNow }) => {
  return (
    <li className="cart-item">
      <img src={item.image} alt={item.name} className="cart-item-image" />
      <div className="cart-item-details">
        <strong>{item.name}</strong>
        <p>₹{item.price}</p>
        <div className="quantity-controls">
          <button onClick={() => UpdateQuantity(item.id, 'decrease')}>-</button>
          <span>{item.quantity}</span>
          <button onClick={() => UpdateQuantity(item.id, 'increase')}>+</button>
        </div>
        <button
          onClick={() => handleBuyNow(item)}
          className="buy-now-button"
        >
          Buy Now
        </button>
      </div>
    </li>
  );
};

export default CartItem;

=>CartSummary.js
import React from 'react';

const CartSummary = ({ totalItems, totalPrice, handleBuyNow }) => {
  return (
    <div className="cart-summary">
      <h3>Cart Summary</h3>
      <p>Total Items: {totalItems}</p>
      <p>Total Price: ₹{totalPrice}</p>
      <button
        onClick={() => handleBuyNow()}
        className="buy-all-button"
      >
        Buy All
      </button>
    </div>
  );
};

export default CartSummary;
=>contact.js
import React, { useState } from 'react';
import './App.css'; // your full CSS containing contact-container

export default function Contact() {
  const [form, setForm] = useState({ name: '', email: '', message: '' });

  const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch('http://localhost:5000/api/contact', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form)
      });

      const data = await res.json();
      if (res.ok) {
        alert('Message sent! We will contact you soon.');
        setForm({ name: '', email: '', message: '' });
      } else {
        alert(data.msg || 'Failed to send message.');
      }
    } catch (err) {
      console.error(err);
      alert('Server error. Please try again later.');
    }
  };

  return (
    <section id="contact" className="contact-container">
      <h2>Contact Us</h2>
      <form className="contact-form" onSubmit={handleSubmit}>
        <input
          name="name"
          placeholder="Your Name"
          value={form.name}
          onChange={handleChange}
          required
        />
        <input
          name="email"
          type="email"
          placeholder="Your Email"
          value={form.email}
          onChange={handleChange}
          required
        />
        <textarea
          name="message"
          placeholder="Your Message"
          value={form.message}
          onChange={handleChange}
          required
        />
        <button type="submit">Send</button>
      </form>
    </section>
  );
}

=>Header.js
import React from 'react';
import { Link } from 'react-router-dom';

const Header = ({ cartCount, user, handleLogout }) => {
  return (
    <header>
      <div className="logo">
        <Link to="/">My Store</Link>
      </div>
      <nav className="navbar">
        <Link to="/">Home</Link>
        <Link to="/mobiles">Mobiles</Link>
        <Link to="/home-products">Home Products</Link>
        <Link to="/about">About</Link>
        <Link to="/contact">Contact</Link>
        {user && user.role === 'seller' && <Link to="/seller">Seller</Link>}
      </nav>
      <div className="auth-links">
        {user ? (
          <>
            <span>Hello, {user.name}</span>
            <button onClick={handleLogout}>Logout</button>
          </>
        ) : (
          <>
            <Link to="/signin">Sign In</Link>
            <Link to="/signup">Sign Up</Link>
          </>
        )}
        <Link to="/cart" className="cart-icon">
          <span className="cart-count">{cartCount}</span>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <circle cx="9" cy="21" r="1"></circle>
            <circle cx="20" cy="21"r="1"></circle>
            <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
          </svg>
        </Link>
      </div>
    </header>
  );
};

export default Header;

=>HomeProducts.css
.products {
  padding: 20px;
}

.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
}

=>HomeProducts.js
import React from "react";
import { useNavigate } from "react-router-dom";
import ProductCard from "./ProductCard";
import "./HomeProducts.css";

function HomeProducts({ AddToCart }) {
  const navigate = useNavigate();

  const products = [
    { id: "home-1", name: "OnePlus TV", price: 20000, image: "images/1+tv.jpeg" },
    { id: "home-2", name: "Preethi Mixture", price: 2500, image: "images/preethi.jpeg" },
    { id: "home-3", name: "MI Washing Machine", price: 15000, image: "images/miw.jpeg" },
    { id: "home-4", name: "Realme AC", price: 35000, image: "images/relme.jpeg" },
    { id: "home-5", name: "Sony Speaker", price: 4000, image: "images/sony.jpeg" },
  ];

  const handleBuyNow = (product) => {
    const token = localStorage.getItem("token");
    const user = JSON.parse(localStorage.getItem("user"));

    if (!token || !user) {
      alert("Please sign in to place an order");
      return;
    }

    // ✅ Navigate to CheckoutForm with product details
    navigate("/checkout", {
      state: {
        items: [
          {
            id: product.id,
            name: product.name,
            price: product.price,
            quantity: 1,
          },
        ],
      },
    });
  };

  return (
    <section id="home-products" className="products">
      <h2>Home Products</h2>
      <div className="product-grid">
        {products.map((product) => (
          <ProductCard
            key={product.id}
            product={product}
            AddToCart={AddToCart}
            handleBuyNow={handleBuyNow}
          />
        ))}
      </div>
    </section>
  );
}

export default HomeProducts;

=>Main.js
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Mobiles from './Mobiles';
import HomeProducts from './HomeProducts';
import About from './about';
import Contact from './contact';
import Cart from './cart';
import Offer from './Offer';
import Signin from './pages/Signin';
import Signup from './pages/Signup';
import CheckoutForm from './components/CheckoutForm';   // ✅ Import CheckoutForm

const Main = ({ AddToCart, cartItems, UpdateQuantity, setUser }) => {
  return (
    <section className='hero'>
      <Routes>
        <Route path="/" element={<Offer />} />
        <Route path="/mobiles" element={<Mobiles AddToCart={AddToCart} />} />
        <Route path="/HomeProducts" element={<HomeProducts AddToCart={AddToCart} />} />
        <Route path="/about" element={<About />} />
        <Route path="/contact" element={<Contact />} />
        <Route path="/cart" element={<Cart cartItems={cartItems} UpdateQuantity={UpdateQuantity} />} />
        <Route path="/signin" element={<Signin setUser={setUser} />} />
        <Route path="/signup" element={<Signup />} />
        {/* ✅ New Checkout route */}
        <Route path="/checkout" element={<CheckoutForm cart={cartItems} />} />
      </Routes>
    </section>
  );
};

export default Main;

=>Mobile.css
=>Mobile.js
import React from "react";
import { useNavigate } from "react-router-dom";
import ProductCard from "./ProductCard";
import './Mobiles.css';

function Mobiles({ AddToCart }) {
    const navigate = useNavigate();

    const products = [
        { id: 'mobile-1', name: 'Pickachu Mobile', price: 10, image: 'images/pickachu.jpg' },
        { id: 'mobile-2', name: 'OnePlus', price: 25000, image: 'images/1+.jpeg' },
        { id: 'mobile-3', name: 'Apple', price: 70000, image: 'images/apple.jpeg' },
        { id: 'mobile-4', name: 'Vivo', price: 10000, image: 'images/vivo.jpeg' },
        { id: 'mobile-5', name: 'Redmi', price: 15000, image: 'images/redmi.jpeg' },
    ];

    const handleBuyNow = (product) => {
        const token = localStorage.getItem("token");
        const user = JSON.parse(localStorage.getItem("user"));

        if (!token || !user) {
            alert("Please sign in to place an order");
            return;
        }

        // ✅ Redirect to CheckoutForm with selected product
        navigate("/checkout", { state: { items: [product] } });
    };

    return (
        <section id="mobiles" className="products">
            <h2>Mobiles</h2>
            <div className="product-grid">
                {products.map(product => (
                    <ProductCard
                        key={product.id}
                        product={product}
                        AddToCart={AddToCart}
                        handleBuyNow={handleBuyNow}
                    />
                ))}
            </div>
        </section>
    );
}

export default Mobiles;

=>Offer.js
import React from "react";
import './App.css';

function Offer() {
    return (
<section id="offers" aria-label="Promotional Offers">
    <h2>Aadi Sale</h2>
    <div className="slider-container" role="region" aria-live="polite" aria-atomic="true">
        <div className="offer-text">
            🚀 50% off on all mobile phones! Grab yours before the sale ends! 🎉
        </div>
    </div>
    <div className="class-grid">
        <div className="class-item" tabindex="0" aria-label="OnePlus Mobile Offer: ₹30,000 reduced to ₹25,000">
            <img src="images/1+.jpeg" alt="OnePlus Mobile" />
            <h3>OnePlus Mobile</h3>
            <p><del>₹30,000.00</del> <strong>₹25,000.00</strong></p>
        </div>
        <div className="class-item" tabindex="0" aria-label="Apple iPhone Offer: ₹100,000 reduced to ₹70,000">
            <img src="images/apple.jpeg" alt="Apple iPhone" />
            <h3>Apple iPhone</h3>
            <p><del>₹100,000.00</del> <strong>₹70,000.00</strong></p>
        </div>
        <div className="class-item" tabindex="0" aria-label="Vivo Mobile Offer: ₹20,000 reduced to ₹10,000">
            <img src="images/vivo.jpeg" alt="Vivo Mobile" />
            <h3>Vivo Mobile</h3>
            <p><del>₹20,000.00</del> <strong>₹10,000.00</strong></p>
        </div>
        <div className="class-item" tabindex="0" aria-label="Preethi Mixture Offer: ₹20,000 reduced to ₹15,000">
            <img src="images/preethi.jpeg" alt="Preethi Mixture" />
            <h3>Preethi Mixture</h3>
            <p><del>₹20,000.00</del> <strong>₹15,000.00</strong></p>
        </div>
        <div className="class-item" tabindex="0" aria-label="Realme Mobile Offer: ₹30,000 reduced to ₹25,000">
            <img src="images/relme.jpeg" alt="Realme Mobile" />
            <h3>Realme Mobile</h3>
            <p><del>₹30,000.00</del> <strong>₹25,000.00</strong></p>
        </div>
    </div>
</section>
    );
}
export default Offer;
